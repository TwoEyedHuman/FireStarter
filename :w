package main

import (
	"os"
	"image"
	_"image/png"
	"github.com/faiface/pixel"
	"github.com/faiface/pixel/pixelgl"
	"golang.org/x/image/colornames"
)

type item struct {
	sprite *pixel.Sprite
	pos pixel.Vec
}

type tile struct {
	sprite *pixel.Sprite
	isAccessible bool
}

type move struct {
	direction string
	pixelLeft int
}

type player struct {
	sprite *pixel.Sprite
	pos pixel.Vec
	gear []item
	pack []item
	disp pixel.Vec
	dispTime float64
}

type spriteMove struct {
	standUp *pixel.Sprite
	standDown *pixel.Sprite
	standLeft *pixel.Sprite
	standRight *pixel.Sprite
	walkUp *pixel.Sprite
	walkDown *pixel.Sprite
	walkLeft *pixel.Sprite
	walkRight *pixel.Sprite
	walkUpAlt *pixel.Sprite
	walkDownAlt *pixel.Sprite
	walkLeftAlt *pixel.Sprite
	walkRightAlt *pixel.Sprite
}

func loadPicture(path string) (pixel.Picture, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()
	img, _, err := image.Decode(file)
	if err != nil {
		return nil, err
	}
	return pixel.PictureDataFromImage(img), nil
}

func buildSpriteMoves(sm * spriteMove, spritesheet pixel.Picture) {
	sm.StandUp = pixel.NewSprite(spritesheet, pixel.R(36+10, 36, 72+10, 72))
	sm.StandDown = pixel.NewSprite(spritesheet, pixel.R(36+10, 108, 72+10, 144))
	sm.StandLeft = pixel.NewSprite(spritesheet, pixel.R(36+10, 0, 72+10, 36))
	sm.StandRight = pixel.NewSprite(spritesheet, pixel.R(36+10, 72, 72+10, 108))
	sm.walkUp = pixel.NewSprite(spritesheet, pixel.R(0, 36, 36, 72))
	sm.walkDown = pixel.NewSprite(spritesheet, pixel.R(0, 108, 36, 144))
	sm.walkLeft = pixel.NewSprite(spritesheet, pixel.R(0, 0, 36, 36))
	sm.walkRight = pixel.NewSprite(spritesheet, pixel.R(0, 72, 36, 108))
	sm.walkUpAlt = pixel.NewSprite(spritesheet, pixel.R(72+20, 36, 108+20, 72))
	sm.walkDownAlt = pixel.NewSprite(spritesheet, pixel.R(72+20, 108, 108+20, 144))
	sm.walkLeftAlt = pixel.NewSprite(spritesheet, pixel.R(72+20, 0, 108+20, 36))
	sm.walkRightAlt = pixel.NewSprite(spritesheet, pixel.R(72+20, 72, 108+20, 108))
}

func initializePlayer(plr * player) {
	plr.pos.X = float64(32 + ((8-1)*64))
	plr.pos.Y = float64(32 + ((8-1)*64))
	plr.disp.X = float64(0)
	plr.disp.Y = float64(0)
	plr.dispTime = 0
}

func moveUpdate(plr * player, direction string, moveSheet * spriteMove) {
	if plr.disp.Len() < 0.01 {
		if direction == "U" {
			plr.disp.Y = -64
			plr.disp.X = 0
			plr.dispTime = 64
			plr.pos.Y += 64
			plr.sprite = moveSheet.walkUp
		} else if direction == "D" {
			plr.disp.Y = 64
			plr.disp.X = 0
			plr.dispTime = 64
			plr.pos.Y -= 64
			plr.sprite = moveSheet.walkDown
		} else if direction == "L" {
			plr.disp.X = 64
			plr.disp.Y = 0
			plr.dispTime = 64
			plr.pos.X -= 64
			plr.sprite = moveSheet.walkLeft
		} else if direction == "R" {
			plr.disp.X = -64
			plr.disp.Y = 0
			plr.dispTime = 64
			plr.pos.X -= 64
			plr.sprite = moveSheet.walkRight
		}
	}
}

func run() {
	cfg := pixelgl.WindowConfig {
		Title: "Fire Starter",
		Bounds: pixel.R(0,0,512,512),
		VSync: true,
	}
	win, err := pixelgl.NewWindow(cfg)
	if err != nil {
		panic(err)
	}

	//Build the base of the map
	mapPic, err := loadPicture("mymap.png")
	if err != nil {
		panic(err)
	}
	mapBase := pixel.NewSprite(mapPic, mapPic.Bounds())

	//Build the structure of player movement sprites
	playerSpritsheet, err := loadPicture("MainGuySpriteSheet.png")
	var playerMoves spriteMove
	buildSpriteMoves(&playerMoves, playerSpritesheet)

	for !win.Closed() {
		//Check for user input
		if win.Pressed(pixelgl.KeyUp) {
			moveUpdate(
		} else if win.Pressed(pixelgl.KeyDown) {

		} else if win.Pressed(pixelgl.KeyLeft) {

		} else if win.Pressed(pixelgl.KeyRight) {

		}

		win.Clear(colornames.Aliceblue)

		mapBase.Draw(win, pixel.IM.Moved(win.Bounds().Center()))

		win.Update()
	}
}

func main() {
	pixelgl.Run(run)
}
